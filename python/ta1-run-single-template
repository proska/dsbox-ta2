#!/usr/bin/env python

import time

start_time = time.clock()
import argparse
import json
from pprint import pprint

from importlib import reload
import dsbox.controller.controller

reload(dsbox.controller.controller)
from dsbox.controller.controller import Controller
import os

controller = Controller(development_mode=True)


def main(args):
    timeout = 0
    configuration_file = args.configuration_file
    test_config = args.test_config
    debug = args.debug

    template_name = args.template

    controller = Controller(development_mode=debug, run_single_template_name=template_name)

    with open(configuration_file) as data:
        config = json.load(data)

    config['timeout'] = timeout

    if args.cpus > -1:
        config['cpus'] = args.cpus

    print('Using configuation:')
    pprint(config)

    if 'test_data_schema' in config and config['test_data_schema'] != '':
        print("[INFO] Test data config found! Will use given test data.")
        controller.initialize_from_config(config)
    else:
        print("[INFO] No test data config found! Will split the data.")
        controller.initialize_from_config_train_test(config)

    status = controller.train()
    print("*+" * 10)
    time_used = time.clock() - start_time
    print("[INFO] The time used for running program is", time_used, "seconds.")

    with open(test_config) as data:
        test_config = json.load(data)

    test_controller = Controller(development_mode=False)
    test_controller.initialize_from_config_for_evaluation(test_config)

    pipeline_exec_files = [f for f in os.listdir(test_controller.output_executables_dir) if
                           os.path.isfile(os.path.join(test_controller.output_executables_dir, f))]

    rank_lst = list()
    for pipeline_f in pipeline_exec_files:
        fitted_pipeline_id = json.load(open(os.path.join(test_controller.output_executables_dir, pipeline_f), "r"))[
            "id"]
        pipeline_obj = json.load(open(os.path.join(controller.output_pipelines_dir, fitted_pipeline_id + ".json"), "r"))
        # rank_lst.append((pipeline_obj["pipeline_rank"], pipeline_obj["id"]))

        fitted_pipeline_id = pipeline_obj["id"]
        status = test_controller.test_fitted_pipeline(fitted_pipeline_id=fitted_pipeline_id)

    return status.value


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Run DSBox TA2 system using json configuration file'
    )

    parser.add_argument('configuration_file',
                        help='D3M TA2 json configuration file')
    parser.add_argument('--timeout', action='store', type=int, default=-1,
                        help='Overide configuation timeout setting. In minutes.')
    parser.add_argument('--cpus', action='store', type=int, default=-1,
                        help='Overide configuation number of cpus usage setting')
    parser.add_argument('--output-prefix', action='store', default=None,
                        help='''Overide configuation output directories paths (pipeline_logs_root, executables_root, temp_storage_root).
                        Replace path prefix "*/output/" with argument''')
    parser.add_argument('--debug', action='store_true', default=False,
                        help='Debug mode. No timeout and no output redirection')

    parser.add_argument('--template', action='store', default="",
                        help='Specify a template name')

    parser.add_argument('--test_config', action='store', default=None,
                        help='Specify a test config')

    args = parser.parse_args()

    print(args)

    result = main(args)
    os._exit(result)
